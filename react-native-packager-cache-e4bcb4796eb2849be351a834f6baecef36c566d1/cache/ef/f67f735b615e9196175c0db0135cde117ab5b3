Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var defaultState = {
    students: []
};

exports.default = StudentsReducer = function StudentsReducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;
    var action = arguments[1];

    switch (action.type) {
        case "ADD_STUDENT":
            state = _extends({}, state, {
                students: [].concat(_toConsumableArray(state.students), [action.payload])
            });
            break;
        case "ADD_STUDENTS":
            state = _extends({}, state, {
                students: [].concat(_toConsumableArray(action.payload))
            });
            break;
        case "REMOVE_STUDENT":
            state = _extends({}, state, {
                students: state.students.filter(function (student) {
                    return student.name !== action.payload;
                })
            });
            break;
        case "RATE":
            state = _extends({}, state, {
                students: state.students.map(function (student) {
                    if (student.name === action.payload.name) {
                        student.stars = student.stars + 1;
                    }

                    return student;
                })
            });
            break;
        case "UNRATE":
            state = _extends({}, state, {
                students: state.students.map(function (student) {
                    if (student.name === action.payload.name && student.stars > 0) {
                        student.stars = student.stars - 1;
                    }
                    return student;
                })
            });
            break;
    }
    return state;
};