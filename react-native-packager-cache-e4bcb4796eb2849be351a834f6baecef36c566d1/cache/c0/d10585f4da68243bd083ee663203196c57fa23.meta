["1327f7783d03b692363de690ca946a47d33b281c","b8c23fa82e3455e00b4a7e513b5810d954fd802a",["react","react-native","prop-types","react-native-animatable","./animations","./index.style.js","regenerator-runtime"],[163,260,303,423,478,601,725],{"version":3,"sources":["/home/cainarm/professorStars/node_modules/react-native-modal/src/index.js"],"names":["ANIMATION_DEFINITIONS","makeAnimation","name","obj","isObject","ReactNativeModal","props","_buildAnimations","nextProps","state","isVisible","setState","animationIn","animationOut","_open","addListener","_handleDimensionsUpdate","removeListener","prevProps","prevState","_close","animationInTiming","animationOutTiming","avoidKeyboard","backdropColor","backdropOpacity","backdropTransitionInTiming","backdropTransitionOutTiming","children","onModalShow","onBackdropPress","onBackButtonPress","style","otherProps","deviceWidth","deviceHeight","computedStyle","margin","transform","translateY","content","containerView","contentRef","ref","backdropRef","backdrop","backgroundColor","width","height","concat","propTypes","oneOfType","string","object","number","bool","node","isRequired","func","onModalHide","any","defaultProps","get","transitionTo","opacity","then"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Dimensions,\n  Modal,\n  DeviceEventEmitter,\n  TouchableWithoutFeedback,\n  KeyboardAvoidingView,\n} from 'react-native';\nimport PropTypes from 'prop-types';\nimport {\n  View,\n  initializeRegistryWithDefinitions,\n  registerAnimation,\n  createAnimation,\n} from 'react-native-animatable';\nimport * as ANIMATION_DEFINITIONS from './animations';\n\nimport styles from './index.style.js';\n\n// Override default animations\ninitializeRegistryWithDefinitions(ANIMATION_DEFINITIONS);\n\n// Utility for creating custom animations\nconst makeAnimation = (name, obj) => {\n  registerAnimation(name, createAnimation(obj));\n};\n\nconst isObject = obj => {\n  return obj !== null && typeof obj === 'object';\n};\n\nexport class ReactNativeModal extends Component {\n  static propTypes = {\n    animationIn: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    animationInTiming: PropTypes.number,\n    animationOut: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    animationOutTiming: PropTypes.number,\n    avoidKeyboard: PropTypes.bool,\n    backdropColor: PropTypes.string,\n    backdropOpacity: PropTypes.number,\n    backdropTransitionInTiming: PropTypes.number,\n    backdropTransitionOutTiming: PropTypes.number,\n    children: PropTypes.node.isRequired,\n    isVisible: PropTypes.bool.isRequired,\n    onModalShow: PropTypes.func,\n    onModalHide: PropTypes.func,\n    onBackButtonPress: PropTypes.func,\n    onBackdropPress: PropTypes.func,\n    style: PropTypes.any,\n  };\n\n  static defaultProps = {\n    animationIn: 'slideInUp',\n    animationInTiming: 300,\n    animationOut: 'slideOutDown',\n    animationOutTiming: 300,\n    avoidKeyboard: false,\n    backdropColor: 'black',\n    backdropOpacity: 0.7,\n    backdropTransitionInTiming: 300,\n    backdropTransitionOutTiming: 300,\n    onModalShow: () => null,\n    onModalHide: () => null,\n    isVisible: false,\n    onBackdropPress: () => null,\n    onBackButtonPress: () => null,\n  };\n\n  // We use an internal state for keeping track of the modal visibility: this allows us to keep\n  // the modal visibile during the exit animation, even if the user has already change the\n  // isVisible prop to false.\n  // We also store in the state the device width and height so that we can update the modal on\n  // device rotation.\n  state = {\n    isVisible: false,\n    deviceWidth: Dimensions.get('window').width,\n    deviceHeight: Dimensions.get('window').height,\n  };\n\n  constructor(props) {\n    super(props);\n    this._buildAnimations(props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (!this.state.isVisible && nextProps.isVisible) {\n      this.setState({ isVisible: true });\n    }\n    if (\n      this.props.animationIn !== nextProps.animationIn ||\n      this.props.animationOut !== nextProps.animationOut\n    ) {\n      this._buildAnimations(nextProps);\n    }\n  }\n\n  componentWillMount() {\n    if (this.props.isVisible) {\n      this.setState({ isVisible: true });\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.isVisible) {\n      this._open();\n    }\n    DeviceEventEmitter.addListener('didUpdateDimensions', this._handleDimensionsUpdate);\n  }\n\n  componentWillUnmount() {\n    DeviceEventEmitter.removeListener('didUpdateDimensions', this._handleDimensionsUpdate);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // On modal open request, we slide the view up and fade in the backdrop\n    if (this.state.isVisible && !prevState.isVisible) {\n      this._open();\n      // On modal close request, we slide the view down and fade out the backdrop\n    } else if (!this.props.isVisible && prevProps.isVisible) {\n      this._close();\n    }\n  }\n\n  // User can define custom react-native-animatable animations, see PR #72\n  _buildAnimations = props => {\n    let animationIn = props.animationIn;\n    let animationOut = props.animationOut;\n\n    if (isObject(animationIn)) {\n      makeAnimation('animationIn', animationIn);\n      animationIn = 'animationIn';\n    }\n\n    if (isObject(animationOut)) {\n      makeAnimation('animationOut', animationOut);\n      animationOut = 'animationOut';\n    }\n\n    this.animationIn = animationIn;\n    this.animationOut = animationOut;\n  };\n\n  _handleDimensionsUpdate = dimensionsUpdate => {\n    // Here we update the device dimensions in the state if the layout changed (triggering a render)\n    const deviceWidth = Dimensions.get('window').width;\n    const deviceHeight = Dimensions.get('window').height;\n    if (deviceWidth !== this.state.deviceWidth || deviceHeight !== this.state.deviceHeight) {\n      this.setState({ deviceWidth, deviceHeight });\n    }\n  };\n\n  _open = () => {\n    this.backdropRef.transitionTo(\n      { opacity: this.props.backdropOpacity },\n      this.props.backdropTransitionInTiming,\n    );\n    this.contentRef[this.animationIn](this.props.animationInTiming).then(() => {\n      this.props.onModalShow();\n    });\n  };\n\n  _close = async () => {\n    this.backdropRef.transitionTo({ opacity: 0 }, this.props.backdropTransitionOutTiming);\n    this.contentRef[this.animationOut](this.props.animationOutTiming).then(() => {\n      this.setState({ isVisible: false });\n      this.props.onModalHide();\n    });\n  };\n\n  render() {\n    const {\n      animationIn,\n      animationInTiming,\n      animationOut,\n      animationOutTiming,\n      avoidKeyboard,\n      backdropColor,\n      backdropOpacity,\n      backdropTransitionInTiming,\n      backdropTransitionOutTiming,\n      children,\n      isVisible,\n      onModalShow,\n      onBackdropPress,\n      onBackButtonPress,\n      style,\n      ...otherProps\n    } = this.props;\n    const { deviceWidth, deviceHeight } = this.state;\n\n    const computedStyle = [\n      { margin: deviceWidth * 0.05, transform: [{ translateY: 0 }] },\n      styles.content,\n      style,\n    ];\n\n    const containerView = (\n      <View\n        ref={ref => (this.contentRef = ref)}\n        style={computedStyle}\n        pointerEvents={'box-none'}\n        {...otherProps}\n      >\n        {children}\n      </View>\n    );\n\n    return (\n      <Modal\n        transparent={true}\n        animationType={'none'}\n        visible={this.state.isVisible}\n        onRequestClose={onBackButtonPress}\n        {...otherProps}\n      >\n        <TouchableWithoutFeedback onPress={onBackdropPress}>\n          <View\n            ref={ref => (this.backdropRef = ref)}\n            style={[\n              styles.backdrop,\n              {\n                backgroundColor: backdropColor,\n                width: deviceWidth,\n                height: deviceHeight,\n              },\n            ]}\n          />\n        </TouchableWithoutFeedback>\n\n        {avoidKeyboard && (\n          <KeyboardAvoidingView\n            behavior={'padding'}\n            pointerEvents={'box-none'}\n            style={computedStyle.concat([{ margin: 0 }])}\n          >\n            {containerView}\n          </KeyboardAvoidingView>\n        )}\n\n        {!avoidKeyboard && containerView}\n      </Modal>\n    );\n  }\n}\n\nexport default ReactNativeModal;\n"]}]