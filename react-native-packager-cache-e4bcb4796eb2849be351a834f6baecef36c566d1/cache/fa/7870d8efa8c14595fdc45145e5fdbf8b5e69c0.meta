["dabb76a1ee7771a3cd7c53a3c47336151751acd4","7ade301f7a37d86f645b19fbcf12471dd5ac0b3a",["prop-types","react-native","react-timer-mixin"],[91,201,321],{"version":3,"sources":["/home/cainarm/professorStars/node_modules/react-native-keyboard-aware-scroll-view/lib/KeyboardAwareMixin.js"],"names":["_KAM_DEFAULT_TAB_BAR_HEIGHT","_KAM_KEYBOARD_OPENING_TIME","_KAM_EXTRA_HEIGHT","KeyboardAwareMixin","mixins","propTypes","enableAutoAutomaticScroll","bool","keyboardOpeningTime","number","extraHeight","extraScrollHeight","enableResetScrollToCoords","getDefaultProps","setViewIsInsideTabBar","viewIsInsideTabBar","keyboardSpace","state","setState","setResetScrollToCoords","coords","resetCoords","getInitialState","keyboardWillShowEvent","undefined","keyboardWillHideEvent","updateKeyboardSpace","frames","endCoordinates","height","props","currentlyFocusedField","State","responder","getScrollResponder","viewIsDescendantOf","getInnerViewNode","isAncestor","measureInWindow","x","y","width","screenY","scrollToFocusedInputWithNodeHandle","defaultResetScrollToCoords","position","resetKeyboardSpace","scrollToPosition","componentDidMount","addListener","componentWillUnmount","remove","refs","_rnkasv_keyboardView","animated","scrollResponderScrollTo","scrollToEnd","scrollResponderScrollToEnd","scrollToFocusedInput","reactNode","setTimeout","scrollResponderScrollNativeHandleToKeyboard","nodeID","findNodeHandle","handleOnScroll","e","nativeEvent","contentOffset"],"mappings":";;;;AAEA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,8BAAsC,EAA5C;AACA,IAAMC,6BAAqC,GAA3C;AACA,IAAMC,oBAA4B,EAAlC;;AAEA,IAAMC,qBAAqB;AACzBC,UAAQ,2BADiB;AAEzBC,aAAW;AACTC,+BAA2B,oBAAUC,IAD5B;AAETC,yBAAqB,oBAAUC,MAFtB;AAGTC,iBAAa,oBAAUD,MAHd;AAITE,uBAAmB,oBAAUF,MAJpB;AAKTG,+BAA2B,oBAAUL;AAL5B,GAFc;;AAUzBM,mBAAiB,2BAAY;AAC3B,WAAO;AACLP,iCAA2B,IADtB;AAELI,mBAAaR,iBAFR;AAGLS,yBAAmB,CAHd;AAILC,iCAA2B,IAJtB;AAKLJ,2BAAqBP;AALhB,KAAP;AAOD,GAlBwB;;AAoBzBa,yBAAuB,+BAAUC,kBAAV,EAAuC;AAC5D,SAAKA,kBAAL,GAA0BA,kBAA1B;AACA,QAAMC,gBAAgBD,qBAAqBf,2BAArB,GAAmD,CAAzE;AACA,QAAI,KAAKiB,KAAL,CAAWD,aAAX,KAA6BA,aAAjC,EAAgD;AAC9C,WAAKE,QAAL,CAAc,EAACF,4BAAD,EAAd;AACD;AACF,GA1BwB;;AA4BzBG,0BAAwB,gCAAUC,MAAV,EAA0C;AAChE,SAAKC,WAAL,GAAmBD,MAAnB;AACD,GA9BwB;;AAgCzBE,mBAAiB,2BAAY;AAC3B,SAAKP,kBAAL,GAA0B,KAA1B;AACA,SAAKQ,qBAAL,GAA6BC,SAA7B;AACA,SAAKC,qBAAL,GAA6BD,SAA7B;AACA,WAAO;AACLR,qBAAe;AADV,KAAP;AAGD,GAvCwB;;AA0CzBU,uBAAqB,6BAAUC,MAAV,EAA0B;AAAA;;AAC7C,QAAIX,gBAAwBW,OAAOC,cAAP,CAAsBC,MAAtB,GAA+B,KAAKC,KAAL,CAAWnB,iBAAtE;AACA,QAAI,KAAKmB,KAAL,CAAWf,kBAAf,EAAmC;AACjCC,uBAAiBhB,2BAAjB;AACD;AACD,SAAKkB,QAAL,CAAc,EAACF,4BAAD,EAAd;;AAEA,QAAI,KAAKc,KAAL,CAAWxB,yBAAf,EAA0C;AACxC,UAAMyB,wBAAwB,uBAAUC,KAAV,CAAgBD,qBAAhB,EAA9B;AACA,UAAME,YAAY,KAAKC,kBAAL,EAAlB;AACA,UAAI,CAACH,qBAAD,IAA0B,CAACE,SAA/B,EAA0C;AACxC;AACD;AACD,6BAAUE,kBAAV,CACEJ,qBADF,EAEEE,UAAUG,gBAAV,EAFF,EAGE,UAACC,UAAD,EAAgB;AACd,YAAIA,UAAJ,EAAgB;AAEd,iCAAUC,eAAV,CAA0BP,qBAA1B,EAAiD,UAACQ,CAAD,EAAIC,CAAJ,EAAOC,KAAP,EAAcZ,MAAd,EAAyB;AACxE,gBAAIW,IAAIX,MAAJ,GAAaF,OAAOC,cAAP,CAAsBc,OAAtB,GAAgC,MAAKZ,KAAL,CAAWnB,iBAA3C,GAA+D,MAAKmB,KAAL,CAAWpB,WAA3F,EAAwG;AACtG,oBAAKiC,kCAAL,CAAwCZ,qBAAxC;AACD;AACF,WAJD;AAKD;AACF,OAZH;AAcD;AACD,QAAI,CAAC,KAAKV,WAAV,EAAuB;AACrB,UAAI,CAAC,KAAKuB,0BAAV,EAAsC;AACpC,aAAKA,0BAAL,GAAkC,KAAKC,QAAvC;AACD;AACF;AACF,GA3EwB;;AA6EzBC,sBAAoB,8BAAY;AAC9B,QAAM9B,gBAAyB,KAAKc,KAAL,CAAWf,kBAAZ,GAAkCf,8BAA8B,KAAK8B,KAAL,CAAWnB,iBAA3E,GAA+F,KAAKmB,KAAL,CAAWnB,iBAAxI;AACA,SAAKO,QAAL,CAAc,EAACF,4BAAD,EAAd;;AAEA,QAAI,KAAKc,KAAL,CAAWlB,yBAAX,KAAyC,KAA7C,EAAoD;AAClD,WAAKgC,0BAAL,GAAkC,IAAlC;AACA;AACD,KAHD,MAGO,IAAI,KAAKvB,WAAT,EAAsB;AAC3B,WAAK0B,gBAAL,CAAsB,KAAK1B,WAAL,CAAiBkB,CAAvC,EAA0C,KAAKlB,WAAL,CAAiBmB,CAA3D,EAA8D,IAA9D;AACD,KAFM,MAEA;AACL,UAAI,KAAKI,0BAAT,EAAqC;AACnC,aAAKG,gBAAL,CAAsB,KAAKH,0BAAL,CAAgCL,CAAtD,EAAyD,KAAKK,0BAAL,CAAgCJ,CAAzF,EAA4F,IAA5F;AACA,aAAKI,0BAAL,GAAkC,IAAlC;AACD,OAHD,MAGO;AACL,aAAKG,gBAAL,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,IAA5B;AACD;AACF;AACF,GA9FwB;;AAgGzBC,qBAAmB,6BAAY;AAE7B,SAAKzB,qBAAL,GAA6B,sBAAS0B,WAAT,CAAqB,kBAArB,EAAyC,KAAKvB,mBAA9C,CAA7B;AACA,SAAKD,qBAAL,GAA6B,sBAASwB,WAAT,CAAqB,kBAArB,EAAyC,KAAKH,kBAA9C,CAA7B;AACD,GApGwB;;AAsGzBI,wBAAsB,gCAAY;AAChC,SAAK3B,qBAAL,IAA8B,KAAKA,qBAAL,CAA2B4B,MAA3B,EAA9B;AACA,SAAK1B,qBAAL,IAA8B,KAAKA,qBAAL,CAA2B0B,MAA3B,EAA9B;AACD,GAzGwB;;AA2GzBjB,oBA3GyB,gCA2GJ;AACnB,WAAO,KAAKkB,IAAL,CAAUC,oBAAV,IAAkC,KAAKD,IAAL,CAAUC,oBAAV,CAA+BnB,kBAA/B,EAAzC;AACD,GA7GwB;;;AA+GzBa,oBAAkB,0BAAUR,CAAV,EAAqBC,CAArB,EAA0D;AAAA,QAA1Bc,QAA0B,uEAAN,IAAM;;AAC1E,QAAMrB,YAAY,KAAKC,kBAAL,EAAlB;AACAD,iBAAaA,UAAUsB,uBAAV,CAAkC,EAAChB,GAAGA,CAAJ,EAAOC,GAAGA,CAAV,EAAac,UAAUA,QAAvB,EAAlC,CAAb;AACD,GAlHwB;;AAoHzBE,eAAa,uBAAqC;AAAA,QAA3BF,QAA2B,uEAAN,IAAM;;AAChD,QAAMrB,YAAY,KAAKC,kBAAL,EAAlB;AACAD,iBAAaA,UAAUwB,0BAAV,CAAqC,EAACH,UAAUA,QAAX,EAArC,CAAb;AACD,GAvHwB;;AA6HzBI,wBAAsB,8BAAUC,SAAV,EAA6BjD,WAA7B,EAAkDF,mBAAlD,EAA+E;AAAA;;AACnG,QAAIE,gBAAgBc,SAApB,EAA+B;AAC3Bd,oBAAc,KAAKoB,KAAL,CAAWpB,WAAzB;AACH;;AAED,QAAIF,wBAAwBgB,SAA5B,EAAuC;AACnChB,4BAAsB,KAAKsB,KAAL,CAAWtB,mBAAjC;AACH;;AAED,SAAKoD,UAAL,CAAgB,YAAM;AACpB,UAAM3B,YAAY,OAAKC,kBAAL,EAAlB;AACAD,mBAAaA,UAAU4B,2CAAV,CACXF,SADW,EACAjD,WADA,EACa,IADb,CAAb;AAGD,KALD,EAKGF,mBALH;AAMD,GA5IwB;;AA8IzBmC,sCAAoC,4CAAUmB,MAAV,EAA0BpD,WAA1B,EAA+CF,mBAA/C,EAA4E;AAC9G,QAAIE,gBAAgBc,SAApB,EAA+B;AAC3Bd,oBAAc,KAAKoB,KAAL,CAAWpB,WAAzB;AACH;;AAED,QAAIF,wBAAwBgB,SAA5B,EAAuC;AACnChB,4BAAsB,KAAKsB,KAAL,CAAWtB,mBAAjC;AACH;;AAED,QAAMmD,YAAY,sBAAYI,cAAZ,CAA2BD,MAA3B,CAAlB;AACA,SAAKJ,oBAAL,CAA0BC,SAA1B,EAAqCjD,cAAc,KAAKoB,KAAL,CAAWnB,iBAA9D,EAAiFH,mBAAjF;AACD,GAzJwB;;AA2JzBqC,YAAU,EAACN,GAAG,CAAJ,EAAOC,GAAG,CAAV,EA3Je;;AA6JzBI,8BAA4B,IA7JH;;AA+JzBoB,kBAAgB,wBAAUC,CAAV,EAAsE;AACpF,SAAKpB,QAAL,GAAgBoB,EAAEC,WAAF,CAAcC,aAA9B;AACD;AAjKwB,CAA3B;;kBAoKehE,kB","sourcesContent":["/* @flow */\n\nimport PropTypes from 'prop-types'\nimport ReactNative, { TextInput, Keyboard, UIManager } from 'react-native'\nimport TimerMixin from 'react-timer-mixin'\n\nconst _KAM_DEFAULT_TAB_BAR_HEIGHT: number = 49\nconst _KAM_KEYBOARD_OPENING_TIME: number = 250\nconst _KAM_EXTRA_HEIGHT: number = 75\n\nconst KeyboardAwareMixin = {\n  mixins: [TimerMixin],\n  propTypes: {\n    enableAutoAutomaticScroll: PropTypes.bool,\n    keyboardOpeningTime: PropTypes.number,\n    extraHeight: PropTypes.number,\n    extraScrollHeight: PropTypes.number,\n    enableResetScrollToCoords: PropTypes.bool,\n  },\n\n  getDefaultProps: function () {\n    return {\n      enableAutoAutomaticScroll: true,\n      extraHeight: _KAM_EXTRA_HEIGHT,\n      extraScrollHeight: 0,\n      enableResetScrollToCoords: true,\n      keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME,\n    }\n  },\n\n  setViewIsInsideTabBar: function (viewIsInsideTabBar: boolean) {\n    this.viewIsInsideTabBar = viewIsInsideTabBar\n    const keyboardSpace = viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0\n    if (this.state.keyboardSpace !== keyboardSpace) {\n      this.setState({keyboardSpace})\n    }\n  },\n\n  setResetScrollToCoords: function (coords: {x: number, y: number}) {\n    this.resetCoords = coords\n  },\n\n  getInitialState: function () {\n    this.viewIsInsideTabBar = false\n    this.keyboardWillShowEvent = undefined\n    this.keyboardWillHideEvent = undefined\n    return {\n      keyboardSpace: 0,\n    }\n  },\n\n  // Keyboard actions\n  updateKeyboardSpace: function (frames: Object) {\n    let keyboardSpace: number = frames.endCoordinates.height + this.props.extraScrollHeight\n    if (this.props.viewIsInsideTabBar) {\n      keyboardSpace -= _KAM_DEFAULT_TAB_BAR_HEIGHT\n    }\n    this.setState({keyboardSpace})\n    // Automatically scroll to focused TextInput\n    if (this.props.enableAutoAutomaticScroll) {\n      const currentlyFocusedField = TextInput.State.currentlyFocusedField()\n      const responder = this.getScrollResponder();\n      if (!currentlyFocusedField || !responder) {\n        return\n      }\n      UIManager.viewIsDescendantOf(\n        currentlyFocusedField,\n        responder.getInnerViewNode(),\n        (isAncestor) => {\n          if (isAncestor) {\n            // Check if the TextInput will be hidden by the keyboard\n            UIManager.measureInWindow(currentlyFocusedField, (x, y, width, height) => {\n              if (y + height > frames.endCoordinates.screenY - this.props.extraScrollHeight - this.props.extraHeight) {\n                this.scrollToFocusedInputWithNodeHandle(currentlyFocusedField)\n              }\n            })\n          }\n        }\n      )\n    }\n    if (!this.resetCoords) {\n      if (!this.defaultResetScrollToCoords) {\n        this.defaultResetScrollToCoords = this.position\n      }\n    }\n  },\n\n  resetKeyboardSpace: function () {\n    const keyboardSpace: number = (this.props.viewIsInsideTabBar) ? _KAM_DEFAULT_TAB_BAR_HEIGHT + this.props.extraScrollHeight : this.props.extraScrollHeight\n    this.setState({keyboardSpace})\n    // Reset scroll position after keyboard dismissal\n    if (this.props.enableResetScrollToCoords === false) {\n      this.defaultResetScrollToCoords = null\n      return\n    } else if (this.resetCoords) {\n      this.scrollToPosition(this.resetCoords.x, this.resetCoords.y, true)\n    } else {\n      if (this.defaultResetScrollToCoords) {\n        this.scrollToPosition(this.defaultResetScrollToCoords.x, this.defaultResetScrollToCoords.y, true)\n        this.defaultResetScrollToCoords = null\n      } else {\n        this.scrollToPosition(0, 0, true)\n      }\n    }\n  },\n\n  componentDidMount: function () {\n    // Keyboard events\n    this.keyboardWillShowEvent = Keyboard.addListener('keyboardWillShow', this.updateKeyboardSpace)\n    this.keyboardWillHideEvent = Keyboard.addListener('keyboardWillHide', this.resetKeyboardSpace)\n  },\n\n  componentWillUnmount: function () {\n    this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove()\n    this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove()\n  },\n\n  getScrollResponder() {\n    return this.refs._rnkasv_keyboardView && this.refs._rnkasv_keyboardView.getScrollResponder()\n  },\n\n  scrollToPosition: function (x: number, y: number, animated: boolean = true) {\n    const responder = this.getScrollResponder();\n    responder && responder.scrollResponderScrollTo({x: x, y: y, animated: animated})\n  },\n\n  scrollToEnd: function (animated?: boolean = true) {\n    const responder = this.getScrollResponder();\n    responder && responder.scrollResponderScrollToEnd({animated: animated})\n  },\n\n  /**\n   * @param keyboardOpeningTime: takes a different keyboardOpeningTime in consideration.\n   * @param extraHeight: takes an extra height in consideration.\n   */\n  scrollToFocusedInput: function (reactNode: Object, extraHeight: number, keyboardOpeningTime: number) {\n    if (extraHeight === undefined) {\n        extraHeight = this.props.extraHeight;\n    }\n\n    if (keyboardOpeningTime === undefined) {\n        keyboardOpeningTime = this.props.keyboardOpeningTime;\n    }\n\n    this.setTimeout(() => {\n      const responder = this.getScrollResponder();\n      responder && responder.scrollResponderScrollNativeHandleToKeyboard(\n        reactNode, extraHeight, true\n      )\n    }, keyboardOpeningTime)\n  },\n\n  scrollToFocusedInputWithNodeHandle: function (nodeID: number, extraHeight: number, keyboardOpeningTime: number) {\n    if (extraHeight === undefined) {\n        extraHeight = this.props.extraHeight;\n    }\n\n    if (keyboardOpeningTime === undefined) {\n        keyboardOpeningTime = this.props.keyboardOpeningTime;\n    }\n\n    const reactNode = ReactNative.findNodeHandle(nodeID)\n    this.scrollToFocusedInput(reactNode, extraHeight + this.props.extraScrollHeight, keyboardOpeningTime)\n  },\n\n  position: {x: 0, y: 0},\n\n  defaultResetScrollToCoords: null, // format: {x: 0, y: 0}\n\n  handleOnScroll: function (e: SyntheticEvent & {nativeEvent: {contentOffset: number}}) {\n    this.position = e.nativeEvent.contentOffset\n  },\n}\n\nexport default KeyboardAwareMixin\n"]}]