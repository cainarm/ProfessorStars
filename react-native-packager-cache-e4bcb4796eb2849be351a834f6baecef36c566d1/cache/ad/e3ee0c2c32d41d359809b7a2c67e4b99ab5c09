Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getAllClasses = getAllClasses;
exports.createClass = createClass;
exports.removeClass = removeClass;

var _reactNative = require("react-native");

var regeneratorRuntime = require("regenerator-runtime");

function getAllClasses() {
    var data;
    return regeneratorRuntime.async(function getAllClasses$(_context) {
        while (1) {
            switch (_context.prev = _context.next) {
                case 0:
                    _context.prev = 0;
                    _context.next = 3;
                    return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem("Classes"));

                case 3:
                    data = _context.sent;


                    if (data !== null) data = JSON.parse(data);else data = [];

                    return _context.abrupt("return", data);

                case 8:
                    _context.prev = 8;
                    _context.t0 = _context["catch"](0);
                    throw _context.t0;

                case 11:
                case "end":
                    return _context.stop();
            }
        }
    }, null, this, [[0, 8]]);
}

function createClass(cl) {
    var data;
    return regeneratorRuntime.async(function createClass$(_context2) {
        while (1) {
            switch (_context2.prev = _context2.next) {
                case 0:
                    _context2.next = 2;
                    return regeneratorRuntime.awrap(getAllClasses());

                case 2:
                    data = _context2.sent;

                    data.push(cl);

                    _reactNative.AsyncStorage.setItem("Classes", JSON.stringify(data));

                case 5:
                case "end":
                    return _context2.stop();
            }
        }
    }, null, this);
}

function removeClass(name) {
    var data;
    return regeneratorRuntime.async(function removeClass$(_context3) {
        while (1) {
            switch (_context3.prev = _context3.next) {
                case 0:
                    _context3.next = 2;
                    return regeneratorRuntime.awrap(getAllClasses());

                case 2:
                    data = _context3.sent;

                    data = data.filter(function (element) {
                        return element.name !== name;
                    });

                    _reactNative.AsyncStorage.setItem("Classes", JSON.stringify(data));

                case 5:
                case "end":
                    return _context3.stop();
            }
        }
    }, null, this);
}