Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getAllStudents = getAllStudents;
exports.createStudent = createStudent;
exports.removeStudent = removeStudent;
exports.rate = rate;
exports.unRate = unRate;

var _Classes = require('./Classes');

var _reactNative = require('react-native');

var regeneratorRuntime = require('regenerator-runtime');

function getAllStudents(className) {
    var data, students;
    return regeneratorRuntime.async(function getAllStudents$(_context) {
        while (1) {
            switch (_context.prev = _context.next) {
                case 0:
                    _context.prev = 0;
                    _context.next = 3;
                    return regeneratorRuntime.awrap((0, _Classes.getAllClasses)());

                case 3:
                    data = _context.sent;
                    students = [];

                    data.forEach(function (element) {
                        if (element.name == className) {
                            students = element.students;
                        }
                    });

                    return _context.abrupt('return', students);

                case 9:
                    _context.prev = 9;
                    _context.t0 = _context['catch'](0);
                    throw _context.t0;

                case 12:
                case 'end':
                    return _context.stop();
            }
        }
    }, null, this, [[0, 9]]);
}

function createStudent(student, className) {
    var classes, students;
    return regeneratorRuntime.async(function createStudent$(_context2) {
        while (1) {
            switch (_context2.prev = _context2.next) {
                case 0:
                    _context2.next = 2;
                    return regeneratorRuntime.awrap((0, _Classes.getAllClasses)());

                case 2:
                    classes = _context2.sent;
                    _context2.next = 5;
                    return regeneratorRuntime.awrap(getAllStudents(className));

                case 5:
                    students = _context2.sent;

                    students.push(student);

                    classes.forEach(function (element, i) {
                        if (element.name === className) {
                            classes[i].students = students;
                        }
                    });
                    _reactNative.AsyncStorage.setItem("Classes", JSON.stringify(classes));

                case 9:
                case 'end':
                    return _context2.stop();
            }
        }
    }, null, this);
}

function removeStudent(name, className) {
    var classes, students;
    return regeneratorRuntime.async(function removeStudent$(_context3) {
        while (1) {
            switch (_context3.prev = _context3.next) {
                case 0:
                    _context3.next = 2;
                    return regeneratorRuntime.awrap((0, _Classes.getAllClasses)());

                case 2:
                    classes = _context3.sent;

                    cl = classes.filter(function (element) {
                        return element.name === className;
                    });

                    students = cl[0].students.filter(function (element) {
                        return element.name !== name;
                    });

                    classes.forEach(function (element, i) {
                        if (element.name === className) {
                            classes[i].students = students;
                        }
                    });

                    _reactNative.AsyncStorage.setItem("Classes", JSON.stringify(classes));

                case 7:
                case 'end':
                    return _context3.stop();
            }
        }
    }, null, this);
}

function rate(name, className) {
    var classes, students;
    return regeneratorRuntime.async(function rate$(_context4) {
        while (1) {
            switch (_context4.prev = _context4.next) {
                case 0:
                    _context4.next = 2;
                    return regeneratorRuntime.awrap((0, _Classes.getAllClasses)());

                case 2:
                    classes = _context4.sent;
                    _context4.next = 5;
                    return regeneratorRuntime.awrap(getAllStudents(className));

                case 5:
                    students = _context4.sent;

                    students.forEach(function (student, i) {
                        if (student.name === name) {
                            students[i].stars = student.stars + 1;
                        }
                    });

                    classes.forEach(function (cl, i) {
                        if (cl.name === className) {
                            classes[i].students = students;
                        }
                    });

                    _reactNative.AsyncStorage.setItem("Classes", JSON.stringify(classes));

                case 9:
                case 'end':
                    return _context4.stop();
            }
        }
    }, null, this);
}

function unRate(name, className) {
    var classes, students;
    return regeneratorRuntime.async(function unRate$(_context5) {
        while (1) {
            switch (_context5.prev = _context5.next) {
                case 0:
                    _context5.next = 2;
                    return regeneratorRuntime.awrap((0, _Classes.getAllClasses)());

                case 2:
                    classes = _context5.sent;
                    _context5.next = 5;
                    return regeneratorRuntime.awrap(getAllStudents(className));

                case 5:
                    students = _context5.sent;

                    students.forEach(function (student, i) {
                        if (student.name === name && student.stars > 0) {
                            students[i].stars = student.stars - 1;
                        }
                    });

                    classes.forEach(function (cl, i) {
                        if (cl.name === className) {
                            classes[i].students = students;
                        }
                    });

                    _reactNative.AsyncStorage.setItem("Classes", JSON.stringify(classes));

                case 9:
                case 'end':
                    return _context5.stop();
            }
        }
    }, null, this);
}