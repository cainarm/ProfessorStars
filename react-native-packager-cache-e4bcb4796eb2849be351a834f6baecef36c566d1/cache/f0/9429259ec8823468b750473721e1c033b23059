Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _reactNative = require('react-native');

var _ListItem = require('../../Components/ListItem');

var _ListItem2 = babelHelpers.interopRequireDefault(_ListItem);

var _Structure = require('../../Components/Structure');

var _Structure2 = babelHelpers.interopRequireDefault(_Structure);

var _reactNativeModal = require('react-native-modal');

var _reactNativeModal2 = babelHelpers.interopRequireDefault(_reactNativeModal);

var _CreateClassForm = require('../../Components/CreateClassForm');

var _CreateClassForm2 = babelHelpers.interopRequireDefault(_CreateClassForm);

var _ClassesActions = require('../../Actions/ClassesActions');

var _ClassesList = require('../../Components/ClassesList');

var _ClassesList2 = babelHelpers.interopRequireDefault(_ClassesList);

var _nativeBase = require('native-base');

var Index = function (_React$Component) {
  babelHelpers.inherits(Index, _React$Component);

  function Index(props) {
    babelHelpers.classCallCheck(this, Index);

    var _this = babelHelpers.possibleConstructorReturn(this, (Index.__proto__ || Object.getPrototypeOf(Index)).call(this, props));

    _this.state = {
      modal: false
    };
    return _this;
  }

  babelHelpers.createClass(Index, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.props.getAllData();
    }
  }, {
    key: 'toggleModal',
    value: function toggleModal() {
      this.setState({
        modal: !this.state.modal
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var navigate = this.props.navigation.navigate;

      return _react2.default.createElement(
        _Structure2.default,
        {
          title: 'Professor Stars',
          subtitle: 'Disciplinas',

          fab: _react2.default.createElement(
            _nativeBase.Fab,
            {
              direction: 'up',
              position: 'bottomRight',
              onPress: function onPress() {
                return _this2.toggleModal();
              },
              style: { right: -10, backgroundColor: "#01579B", position: 'absolute' }
            },
            _react2.default.createElement(_nativeBase.Icon, {
              name: 'md-add'
            })
          )
        },
        _react2.default.createElement(_ClassesList2.default, {
          redirect: function redirect() {
            return navigate("Students");
          },
          setTargetClass: function setTargetClass(name) {
            return _this2.props.setTargetClass(name);
          },
          classes: this.props.classes,
          remove: function remove(name) {
            return _this2.props.remove(name);
          }
        }),
        _react2.default.createElement(
          _reactNativeModal2.default,
          {
            isVisible: this.state.modal,
            onBackButtonPress: function onBackButtonPress() {
              return _this2.toggleModal();
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            { style: { backgroundColor: '#fff', height: 206, borderRadius: 4 } },
            _react2.default.createElement(_CreateClassForm2.default, {
              onCancel: function onCancel() {
                return _this2.toggleModal();
              },
              submit: function submit(value) {
                return _this2.props.add(value);
              }
            })
          )
        )
      );
    }
  }]);
  return Index;
}(_react2.default.Component);

var mapStateToProps = function mapStateToProps(state) {
  return {
    classes: state.classes.classes
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    add: function add(value) {
      dispatch((0, _ClassesActions.addClass)(value));
    },
    remove: function remove(value) {
      dispatch((0, _ClassesActions.removeClass)(value));
    },
    getAllData: function getAllData() {
      dispatch((0, _ClassesActions.getAllClasses)());
    },
    setTargetClass: function setTargetClass(name) {
      dispatch((0, _ClassesActions.setTargetClass)(name));
    }
  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Index);