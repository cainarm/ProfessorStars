["40c6f9efa4a1ec0c8afa4700332a3d453f0dd797","dc31b868e55cd5aa66896aea8fbed216e99ad2b7",["react","react-redux","react-native","../../Components/StudentListItem","../../Components/Structure","react-native-modal","../../Components/CreateClassForm","../../Actions/StudentsActions","underscore","react-navigation","native-base"],[87,183,227,276,418,549,685,833,894,1010,1058],{"version":3,"sources":["/home/cainarm/professorStars/src/Containers/Students/StudentsContainer.js"],"names":["styles","create","icon","fontSize","color","Index","props","ds","DataSource","rowHasChanged","r1","r2","isMatch","state","students","cloneWithRows","modal","getAllStudents","targetClass","nextProps","setState","navigation","navigate","goBack","dispatch","back","toggleModal","right","backgroundColor","position","marginBottom","name","stars","alert","text","onPress","remove","cancelable","rate","unRate","height","borderRadius","value","add","Component","mapStateToProps","classes","mapDispatchToProps","className"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { StyleSheet, View, Alert, ListView } from 'react-native';\nimport ListItem from '../../Components/StudentListItem';\nimport Structure from '../../Components/Structure';\nimport Modal from 'react-native-modal'\nimport CreateClassForm from '../../Components/CreateClassForm';\nimport { addStudent, removeStudent, getAllStudents, rate, unRate} from '../../Actions/StudentsActions';\nimport _ from 'underscore';\nimport { NavigationActions} from 'react-navigation';\nimport { \n  Container, \n  List,\n  Header, \n  Title, \n  Fab,\n  Content, \n  Button, \n  Left, \n  Right, \n  Body, \n  Icon, \n  Text \n} from 'native-base';\n\nconst styles = StyleSheet.create({\n  icon: {\n    fontSize: 35,\n    color: '#D50000'\n  },\n});\n\nclass Index extends React.Component {\n  constructor(props){\n    super(props);\n    this.ds = new ListView.DataSource({ rowHasChanged: (r1, r2) => _.isMatch(r1, r2) });\n    this.state = {\n      students: this.ds.cloneWithRows(props.students),\n      modal: false\n    }\n  }\n\n  componentWillMount() {\n    this.props.getAllStudents(this.props.targetClass);\n  }\n\n  componentWillReceiveProps(nextProps){\n      this.setState({\n        students: this.ds.cloneWithRows(nextProps.students)\n      });\n  }\n\n  toggleModal(){\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  render() {\n    const { navigate, goBack } = this.props.navigation;\n\n    return (\n      <Structure \n        title=\"Professor Stars\"\n        subtitle=\"Alunos\"\n        hasBackButton={true}\n        backButtonAction={() => this.props.navigation.dispatch(NavigationActions.back())}\n        fab={\n            <Fab\n              direction=\"up\"\n              position=\"bottomRight\"\n              onPress={() => this.toggleModal()}\n              style={{right: -10, backgroundColor: \"#01579B\", position: 'absolute'}}\n            >\n              <Icon\n                name=\"md-add\"\n              />\n          </Fab>\n        }\n      >\n          <ListView \n            style={{marginBottom: 60}}\n            dataSource = {this.state.students}\n            renderRow = { ({name, stars}) => {\n              return (\n                <ListItem \n                  remove = {() => {\n                    Alert\n                    .alert(\n                      \"Aviso\", \n                      \"Tem certeza que deseja deletar este aluno ?\",\n                      [\n                        {text: \"Cancelar\", onPress: () => null},\n                        {text: \"Sim \", onPress: () => this.props.remove(name, this.props.targetClass),},\n                      ],\n                        {cancelable: true}\n                    )\n                  }}\n                  stars={stars}\n                  rate={() => this.props.rate(name, this.props.targetClass)}\n                  unRate={() => this.props.unRate(name, this.props.targetClass)}\n                  icon={\n                      <Icon \n                        name=\"ios-trash-outline\"\n                        style={styles.icon} \n                      />\n                  }\n                >\n                  {name}\n                </ListItem>\n              )\n            }}\n          />\n          <Modal \n            isVisible={this.state.modal} \n            onBackButtonPress={() => this.toggleModal() }\n            \n          >\n            <View style={{backgroundColor:'#fff', height: 206, borderRadius: 4}}>\n              <CreateClassForm \n                onCancel={() => this.toggleModal()}\n                submit={(value) => this.props.add(value, this.props.targetClass) }\n              />\n            </View>\n          </Modal>\n      </Structure>\n    );\n  }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        students: state.students.students,\n        targetClass: state.classes.targetClass\n    }\n};\n\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n      add: (value, name)  => {\n        dispatch(addStudent(value, name));\n      },\n      remove: (value, name) => {\n        dispatch(removeStudent(value, name));\n      },\n      getAllStudents: value => {\n        dispatch(getAllStudents(value));\n      },\n      rate: (name, className) => {\n        dispatch(rate(name, className));\n      },\n      unRate: (name, className) => {\n        dispatch(unRate(name, className));\n      }\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);\n"]}]