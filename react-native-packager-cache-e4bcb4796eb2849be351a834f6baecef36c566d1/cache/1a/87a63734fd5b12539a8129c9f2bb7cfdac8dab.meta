["66499df8e91e40d004e16d31e04ab79b6de28bd9","5fed571878b3ec3104371461dd4c8ec0bab41934",["lodash/isPlainObject","symbol-observable"],[139,260],{"version":3,"sources":["/home/cainarm/professorStars/node_modules/redux/lib/createStore.js"],"names":["exports","__esModule","ActionTypes","undefined","createStore","_isPlainObject","require","_isPlainObject2","_interopRequireDefault","_symbolObservable","_symbolObservable2","obj","INIT","reducer","preloadedState","enhancer","_ref2","Error","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","slice","getState","subscribe","listener","isSubscribed","push","unsubscribe","index","indexOf","splice","dispatch","action","type","listeners","i","length","replaceReducer","nextReducer","observable","_ref","outerSubscribe","observer","TypeError","observeState","next"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.ActionTypes = undefined;\nexports['default'] = createStore;\n\nvar _isPlainObject = require('lodash/isPlainObject');\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nvar _symbolObservable = require('symbol-observable');\n\nvar _symbolObservable2 = _interopRequireDefault(_symbolObservable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar ActionTypes = exports.ActionTypes = {\n  INIT: '@@redux/INIT'\n\n  /**\n   * Creates a Redux store that holds the state tree.\n   * The only way to change the data in the store is to call `dispatch()` on it.\n   *\n   * There should only be a single store in your app. To specify how different\n   * parts of the state tree respond to actions, you may combine several reducers\n   * into a single reducer function by using `combineReducers`.\n   *\n   * @param {Function} reducer A function that returns the next state tree, given\n   * the current state tree and the action to handle.\n   *\n   * @param {any} [preloadedState] The initial state. You may optionally specify it\n   * to hydrate the state from the server in universal apps, or to restore a\n   * previously serialized user session.\n   * If you use `combineReducers` to produce the root reducer function, this must be\n   * an object with the same shape as `combineReducers` keys.\n   *\n   * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n   * to enhance the store with third-party capabilities such as middleware,\n   * time travel, persistence, etc. The only store enhancer that ships with Redux\n   * is `applyMiddleware()`.\n   *\n   * @returns {Store} A Redux store that lets you read the state, dispatch actions\n   * and subscribe to changes.\n   */\n};function createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.');\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n  function getState() {\n    return currentState;\n  }\n\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected listener to be a function.');\n    }\n\n    var isSubscribed = true;\n\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      isSubscribed = false;\n\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n    };\n  }\n\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n  function dispatch(action) {\n    if (!(0, _isPlainObject2['default'])(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.');\n    }\n\n    currentReducer = nextReducer;\n    dispatch({ type: ActionTypes.INIT });\n  }\n\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object') {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return { unsubscribe: unsubscribe };\n      }\n    }, _ref[_symbolObservable2['default']] = function () {\n      return this;\n    }, _ref;\n  }\n\n  // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n  dispatch({ type: ActionTypes.INIT });\n\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[_symbolObservable2['default']] = observable, _ref2;\n}"]}]